/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package police.gui;
import java.awt.*;
import javax.swing.*;
import java.io.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.table.DefaultTableModel;
import police.CSVHandler;
import police.model.*;


/**
 *
 * @author HP
 */
public class CheckComplaintsForm extends javax.swing.JFrame {

    /**
     * Creates new form CheckComplaintsForm
     */
    private List<Complaint> complaints;
    private static String loggedInUsername;
    private CSVHandler csvHandler;
    
    public CheckComplaintsForm(String loggedInUsername) 
    {
        initComponents();
        setLocationRelativeTo(null);
        loadPendingComplaints();
        this.loggedInUsername = loggedInUsername;
        try 
        {
            this.csvHandler = new CSVHandler();
        } 
        catch (Exception e) 
        {
            JOptionPane.showMessageDialog(null, "Failed to initialize CSVHandler: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    } 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        tablePanel = new javax.swing.JPanel();
        scrollPane = new javax.swing.JScrollPane();
        complainsTable = new javax.swing.JTable();
        headinglbl = new javax.swing.JLabel();
        Backbtn = new javax.swing.JButton();
        ViewComplain = new javax.swing.JButton();
        ChangeStatus = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Check Complains");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 0, 102));
        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        scrollPane.setBackground(new java.awt.Color(0, 0, 0));
        scrollPane.setForeground(new java.awt.Color(255, 255, 255));

        complainsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        scrollPane.setViewportView(complainsTable);

        javax.swing.GroupLayout tablePanelLayout = new javax.swing.GroupLayout(tablePanel);
        tablePanel.setLayout(tablePanelLayout);
        tablePanelLayout.setHorizontalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tablePanelLayout.createSequentialGroup()
                .addGap(0, 2, Short.MAX_VALUE)
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 808, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        tablePanelLayout.setVerticalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
        );

        jPanel1.add(tablePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 810, 380));

        headinglbl.setBackground(new java.awt.Color(255, 255, 0));
        headinglbl.setFont(new java.awt.Font("Wide Latin", 1, 18)); // NOI18N
        headinglbl.setForeground(new java.awt.Color(255, 255, 0));
        headinglbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headinglbl.setText("Pending Complains");
        jPanel1.add(headinglbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 9, 340, 50));

        Backbtn.setBackground(new java.awt.Color(204, 0, 0));
        Backbtn.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        Backbtn.setForeground(new java.awt.Color(255, 255, 255));
        Backbtn.setText("Back");
        Backbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackbtnActionPerformed(evt);
            }
        });
        jPanel1.add(Backbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 530, 110, 30));

        ViewComplain.setBackground(new java.awt.Color(0, 0, 0));
        ViewComplain.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        ViewComplain.setForeground(new java.awt.Color(255, 255, 255));
        ViewComplain.setText("View Complain");
        ViewComplain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewComplainActionPerformed(evt);
            }
        });
        jPanel1.add(ViewComplain, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 490, 170, 40));

        ChangeStatus.setBackground(new java.awt.Color(0, 0, 0));
        ChangeStatus.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        ChangeStatus.setForeground(new java.awt.Color(255, 255, 255));
        ChangeStatus.setText("Change Status");
        ChangeStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChangeStatusActionPerformed(evt);
            }
        });
        jPanel1.add(ChangeStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 490, 150, 40));

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 870, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 870, 60));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 566, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BackbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackbtnActionPerformed
        this.dispose();
    }//GEN-LAST:event_BackbtnActionPerformed

    private void ViewComplainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewComplainActionPerformed
        int selectedRow = complainsTable.getSelectedRow();
        Complaint complaint = complaints.get(selectedRow);
        System.out.println("Selected complaint at row " + selectedRow + ": " + 
            (complaint != null ? 
                "ID=" + complaint.getComplaintId() + ", Name=" + complaint.getComplainantName() + 
                ", Status=" + complaint.getStatus() : "null"));
            if (complaint == null || complaint.getComplaintId() == null || complaint.getComplaintId().isEmpty()) 
            {
                System.err.println("Error: Invalid complaint at row " + selectedRow + ", complaint: " + complaint);
                JOptionPane.showMessageDialog(this, "Invalid complaint data.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }  
        if (selectedRow >= 0 && selectedRow < complaints.size()) 
        {
            complaint = complaints.get(selectedRow);
            new DetailedViewComplainForm(complaint, loggedInUsername).setVisible(true);
        } 
        else 
        {
            JOptionPane.showMessageDialog(this, "Please select a complaint to view.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ViewComplainActionPerformed

    private void ChangeStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChangeStatusActionPerformed
        int selectedRow = complainsTable.getSelectedRow();
        if (selectedRow >= 0 && selectedRow < complaints.size()) 
        {
            Complaint complaint = complaints.get(selectedRow);
            try 
            {
                showChangeStatusDialog(complaint);
            }
            catch (Exception ex) {
                System.err.println("Error opening status dialog: " + ex.getMessage());
                JOptionPane.showMessageDialog(this, "Error changing status: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        else 
        {
            JOptionPane.showMessageDialog(this, "Please select a complaint.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ChangeStatusActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CheckComplaintsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CheckComplaintsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CheckComplaintsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CheckComplaintsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CheckComplaintsForm(loggedInUsername).setVisible(true);
            }
        });
    }
    
    
    private void loadPendingComplaints() 
    {
        complaints = CSVHandler.loadComplaints().stream()
                .filter(c -> "PENDING".equalsIgnoreCase(c.getStatus()))
                .collect(Collectors.toList());
        String[] columnNames = {"Complaint ID", "Complainant Name", "Phone No", "NIC", "Status"};
        Object[][] data = new Object[complaints.size()][5];
        for (int i = 0; i < complaints.size(); i++) 
        {
            Complaint c = complaints.get(i);
            data[i][0] = c.getComplaintId();
            data[i][1] = c.getComplainantName();
            data[i][2] = c.getContact() != null ? c.getContact() : "";
            data[i][3] = c.getNicNumber() != null ? c.getNicNumber() : "";
            data[i][4] = c.getStatus();
        }
        complainsTable.setModel(new DefaultTableModel(data, columnNames) 
        {
            @Override
            public boolean isCellEditable(int row, int column) 
            {
                return false;
            }
        });
        complainsTable.getColumnModel().getColumn(0).setPreferredWidth(100);
        complainsTable.getColumnModel().getColumn(1).setPreferredWidth(150);
        complainsTable.getColumnModel().getColumn(2).setPreferredWidth(120);
        complainsTable.getColumnModel().getColumn(3).setPreferredWidth(120);
        complainsTable.getColumnModel().getColumn(4).setPreferredWidth(100);
    }
    
    
    private String generateFirId() 
    {
        int count = csvHandler.getFirCount() + 1;
        return String.format("FIR%03d", count);
    }

    private String generateInvestigationId() 
    {
        int count = csvHandler.getInvestigationCount() + 1;
        return String.format("INV%03d", count);
    }
    
    private void showChangeStatusDialog(Complaint complaint)
    {
        if (complaint == null) 
        {
            System.err.println("Error: Complaint is null in showChangeStatusDialog");
            JOptionPane.showMessageDialog(this, "Invalid complaint selected.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        System.out.println("Opening status dialog for complaint: " + complaint.getComplaintId());
        System.out.println("Incident Date: " + complaint.getIncidentDate());

        // Validate complainantName
        if (complaint.getComplainantName() == null || complaint.getComplainantName().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Complainant name is required.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        JDialog dialog = new JDialog(this, "Change Complaint Status", true);
        dialog.setSize(400, 300);
        dialog.setLocationRelativeTo(this);
        dialog.setLayout(new BorderLayout());
        dialog.setBackground(new Color(240, 240, 240));

        JPanel contentPanel = new JPanel(new GridBagLayout());
        contentPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        contentPanel.setBackground(new Color(240, 240, 240));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        JLabel idLabel = new JLabel("Complaint ID: " + complaint.getComplaintId());
        idLabel.setFont(new Font("Arial", Font.BOLD, 16));
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        contentPanel.add(idLabel, gbc);

        JLabel statusLabel = new JLabel("Status:");
        statusLabel.setFont(new Font("Arial", Font.BOLD, 14));
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 1;
        contentPanel.add(statusLabel, gbc);

        JPanel radioPanel = new JPanel();
        radioPanel.setLayout(new BoxLayout(radioPanel, BoxLayout.Y_AXIS));
        radioPanel.setBackground(new Color(240, 240, 240));
        JRadioButton pendingRadio = new JRadioButton("Pending", complaint.getStatus().equals("PENDING"));
        JRadioButton approvedRadio = new JRadioButton("Approved", complaint.getStatus().equals("APPROVED"));
        JRadioButton disapprovedRadio = new JRadioButton("Disapproved", complaint.getStatus().equals("DISAPPROVED"));
        pendingRadio.setFont(new Font("Arial", Font.PLAIN, 14));
        approvedRadio.setFont(new Font("Arial", Font.PLAIN, 14));
        disapprovedRadio.setFont(new Font("Arial", Font.PLAIN, 14));
        pendingRadio.setBackground(new Color(240, 240, 240));
        approvedRadio.setBackground(new Color(240, 240, 240));
        disapprovedRadio.setBackground(new Color(240, 240, 240));
        ButtonGroup statusGroup = new ButtonGroup();
        statusGroup.add(pendingRadio);
        statusGroup.add(approvedRadio);
        statusGroup.add(disapprovedRadio);
        radioPanel.add(pendingRadio);
        radioPanel.add(approvedRadio);
        radioPanel.add(disapprovedRadio);
        gbc.gridx = 1;
        gbc.gridy = 1;
        contentPanel.add(radioPanel, gbc);

        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        buttonPanel.setBackground(new Color(240, 240, 240));
        JButton doneButton = new JButton("Done");
        JButton cancelButton = new JButton("Cancel");
        doneButton.setFont(new Font("Arial", Font.PLAIN, 14));
        doneButton.setBackground(Color.WHITE);
        doneButton.setPreferredSize(new Dimension(100, 30));
        cancelButton.setFont(new Font("Arial", Font.PLAIN, 14));
        cancelButton.setBackground(Color.WHITE);
        cancelButton.setPreferredSize(new Dimension(100, 30));
        buttonPanel.add(doneButton);
        buttonPanel.add(cancelButton);

        dialog.add(contentPanel, BorderLayout.CENTER);
        dialog.add(buttonPanel, BorderLayout.SOUTH);

        doneButton.addActionListener(e -> {
        String selectedStatus = pendingRadio.isSelected() ? "PENDING" :
                               approvedRadio.isSelected() ? "APPROVED" : "DISAPPROVED";
        System.out.println("Selected status: " + selectedStatus + " for complaint: " + complaint.getComplaintId());
        if (!selectedStatus.equals(complaint.getStatus())) 
        {
            try 
            {
                if (selectedStatus.equals("APPROVED")) 
                {
                    int confirm = JOptionPane.showConfirmDialog(dialog,
                            "Are you sure you want to approve the complaint? This will register an FIR.",
                            "Confirm Approval", JOptionPane.OK_CANCEL_OPTION);
                    if (confirm == JOptionPane.OK_OPTION) 
                    {
                        JTextField crimeTypeField = new JTextField();
                        JPanel panel = new JPanel(new GridLayout(0, 1));
                        panel.add(new JLabel("Enter Crime Type:"));
                        panel.add(crimeTypeField);
                        int crimeTypeResult = JOptionPane.showConfirmDialog(dialog, panel, "Crime Type", JOptionPane.OK_CANCEL_OPTION);
                        if (crimeTypeResult == JOptionPane.OK_OPTION) 
                        {
                            String crimeType = crimeTypeField.getText().trim();
                            if (crimeType.isEmpty()) 
                            {
                                JOptionPane.showMessageDialog(dialog, "Crime Type is required.", "Error", JOptionPane.ERROR_MESSAGE);
                                return;
                            }
                            System.out.println("Approving complaint: " + complaint.getComplaintId() + ", Crime Type: " + crimeType);
                            String firId = generateFirId(); // Use the same FIR ID pattern as FIR Module

                            FIR fir = new FIR(
                                firId,
                                complaint.getComplainantName(),
                                complaint.getComplainantFatherName() != null ? complaint.getComplainantFatherName() : "",
                                complaint.getContact() != null ? complaint.getContact() : "",
                                complaint.getAddress() != null ? complaint.getAddress() : "",
                                complaint.getNicNumber() != null ? complaint.getNicNumber() : "",
                                complaint.getIncidentDate() != null ? complaint.getIncidentDate() : "",
                                complaint.getIncidentTime() != null ? complaint.getIncidentTime() : "",
                                complaint.getLocation() != null ? complaint.getLocation() : "",
                                complaint.getDescription() != null ? complaint.getDescription() : "",
                                crimeType
                            );
                            CSVHandler.addFIR(fir);

                            String investigationId = generateInvestigationId();
                            Date creationDate = null;
                            try 
                            {
                                if (complaint.getIncidentDate() != null && !complaint.getIncidentDate().isEmpty()) 
                                {
                                    creationDate = new SimpleDateFormat("MM/dd/yyyy").parse(complaint.getIncidentDate());
                                }
                            }
                            catch (Exception ex) 
                            {
                                System.err.println("Failed to parse incident date: " + ex.getMessage());
                            }
                            Investigation investigation = new Investigation(
                                investigationId, // investigationId
                                firId,           // firId
                                creationDate,    // creationDate (from complaint's incidentDate)
                                null,            // officerId1
                                null,            // officerId2
                                new ArrayList<>(), // evidencePaths
                                "",              // witnessStatements
                                "",              // otherDetails
                                "",              // suspects
                                "",              // caseResult
                                "",              // finalCriminal
                                "Active",        // status
                                new Date()       // lastUpdated
                            );
                            csvHandler.addInvestigationDetails(investigation);

                            CSVHandler.updateComplaintStatus(complaint.getComplaintId(), "APPROVED");
                            loadPendingComplaints();
                            JOptionPane.showMessageDialog(dialog, "FIR and Investigation Registered Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                            dialog.dispose();
                        }
                    }
                } 
                else
                {
                    int confirm = JOptionPane.showConfirmDialog(dialog,
                            "Are you sure you want to change the complaint status to " + selectedStatus + "?",
                            "Confirm Status Change", JOptionPane.OK_CANCEL_OPTION);
                    if (confirm == JOptionPane.OK_OPTION) 
                    {
                        CSVHandler.updateComplaintStatus(complaint.getComplaintId(), selectedStatus);
                        loadPendingComplaints();
                        JOptionPane.showMessageDialog(dialog, "Complaint Status Updated to " + selectedStatus, "Success", JOptionPane.INFORMATION_MESSAGE);
                        dialog.dispose();
                    }
                }
            } 
            catch (IllegalArgumentException ex)
            {
                System.err.println("Invalid FIR data: " + ex.getMessage());
                JOptionPane.showMessageDialog(dialog, "Error creating FIR: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            } 
            catch (IOException ex) 
            {
                System.err.println("Error processing status change: " + ex.getMessage());
                JOptionPane.showMessageDialog(dialog, "Error updating status: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        else 
        {
            dialog.dispose();
        }
    });

    cancelButton.addActionListener(e -> dialog.dispose());  
    dialog.setVisible(true);
    }


    private String convertDateFormat(String inputDate, SimpleDateFormat fromFormat, SimpleDateFormat toFormat) throws ParseException 
    {
        if (inputDate == null || inputDate.trim().isEmpty()) 
        {
            throw new ParseException("Incident date is empty", 0);
        }
        try 
        {
            fromFormat.setLenient(false);
            Date date = fromFormat.parse(inputDate);
            return toFormat.format(date);
        } 
        catch (ParseException e) 
        {
            throw new ParseException("Cannot convert date: " + inputDate, 0);
        }
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Backbtn;
    private javax.swing.JButton ChangeStatus;
    private javax.swing.JButton ViewComplain;
    private javax.swing.JTable complainsTable;
    private javax.swing.JLabel headinglbl;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JPanel tablePanel;
    // End of variables declaration//GEN-END:variables
}

