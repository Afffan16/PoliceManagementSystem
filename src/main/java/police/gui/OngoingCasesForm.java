/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package police.gui;
import police.*;
import police.model.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author HP
 */
public class OngoingCasesForm extends javax.swing.JFrame {

    /**
     * Creates new form OngoingCasesForm
     */
    private CSVHandler csvHandler;
    private DefaultTableModel tableModel;
    private static String loggedInUsername;
    public OngoingCasesForm(String loggedInUsername)
    {
        setLocationRelativeTo(null);
        this.loggedInUsername = loggedInUsername;
        try 
        {
            csvHandler = new CSVHandler();
        } 
        catch (Exception e) 
        {
            JOptionPane.showMessageDialog(this, "Failed to initialize CSVHandler: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        initComponents();
        tableModel = new DefaultTableModel();
        configureTable();
        populateTable();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel2 = new javax.swing.JPanel();
        headinglbl2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        Backbtn2 = new javax.swing.JButton();
        ManageViewCasebtn = new javax.swing.JButton();
        AssignOfficersBtn = new javax.swing.JButton();
        tablePane = new javax.swing.JScrollPane();
        ongoingCasesTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        mainPanel2.setBackground(new java.awt.Color(255, 255, 255));
        mainPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        mainPanel2.setPreferredSize(new java.awt.Dimension(600, 520));

        headinglbl2.setBackground(new java.awt.Color(51, 102, 255));
        headinglbl2.setFont(new java.awt.Font("Britannic Bold", 0, 24)); // NOI18N
        headinglbl2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headinglbl2.setText("ONGOING CASES");

        Backbtn2.setFont(new java.awt.Font("Bodoni MT", 1, 14)); // NOI18N
        Backbtn2.setText("Back");
        Backbtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Backbtn2ActionPerformed(evt);
            }
        });

        ManageViewCasebtn.setFont(new java.awt.Font("Bodoni MT", 1, 14)); // NOI18N
        ManageViewCasebtn.setText("Edit Case Info");
        ManageViewCasebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ManageViewCasebtnActionPerformed(evt);
            }
        });

        AssignOfficersBtn.setFont(new java.awt.Font("Bodoni MT", 1, 14)); // NOI18N
        AssignOfficersBtn.setText("Assign Officers");
        AssignOfficersBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AssignOfficersBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(ManageViewCasebtn)
                .addGap(26, 26, 26)
                .addComponent(AssignOfficersBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Backbtn2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Backbtn2)
                    .addComponent(ManageViewCasebtn)
                    .addComponent(AssignOfficersBtn))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        ongoingCasesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Investigation ID", "FIR ID", "Case Started", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ongoingCasesTable.getTableHeader().setReorderingAllowed(false);
        tablePane.setViewportView(ongoingCasesTable);
        ongoingCasesTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (ongoingCasesTable.getColumnModel().getColumnCount() > 0) {
            ongoingCasesTable.getColumnModel().getColumn(0).setResizable(false);
            ongoingCasesTable.getColumnModel().getColumn(0).setPreferredWidth(120);
            ongoingCasesTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            ongoingCasesTable.getColumnModel().getColumn(2).setResizable(false);
            ongoingCasesTable.getColumnModel().getColumn(2).setPreferredWidth(100);
            ongoingCasesTable.getColumnModel().getColumn(3).setPreferredWidth(100);
        }

        javax.swing.GroupLayout mainPanel2Layout = new javax.swing.GroupLayout(mainPanel2);
        mainPanel2.setLayout(mainPanel2Layout);
        mainPanel2Layout.setHorizontalGroup(
            mainPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanel2Layout.createSequentialGroup()
                .addGroup(mainPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(mainPanel2Layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addComponent(headinglbl2, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(tablePane, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE))
                    .addGroup(mainPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        mainPanel2Layout.setVerticalGroup(
            mainPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanel2Layout.createSequentialGroup()
                .addComponent(headinglbl2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(tablePane, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 591, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Backbtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Backbtn2ActionPerformed
        new CaseInvestigationDashboard(loggedInUsername).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_Backbtn2ActionPerformed

    private void ManageViewCasebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ManageViewCasebtnActionPerformed
        openInvestigationForm();
        this.dispose();
    }//GEN-LAST:event_ManageViewCasebtnActionPerformed

    private void AssignOfficersBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AssignOfficersBtnActionPerformed
        int row = ongoingCasesTable.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Please select a case to assign officers.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!csvHandler.isAdmin(loggedInUsername)) {
            JOptionPane.showMessageDialog(this, "Only admins can assign officers.", "Permission Denied", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String investigationId = (String) ongoingCasesTable.getValueAt(row, 0);
        Investigation inv = csvHandler.findInvestigationById(investigationId);
        if (inv == null) {
            JOptionPane.showMessageDialog(this, "Investigation not found.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Load all officers
         
        List<Officer> officers = null;
        Map<String, String> officerNameToId = new HashMap<>();
        List<String> officerNames = new ArrayList<>();
        try 
        {
            officers = csvHandler.loadOfficers();
            for (Officer officer : officers) 
            {
                officerNames.add(officer.getName());
                officerNameToId.put(officer.getName(), officer.getOfficerId());
            }
        } 
        catch (IOException e) 
        {
            JOptionPane.showMessageDialog(this, "Error loading officers: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return; // Exit the method if officer loading fails
        }

        // Create popup dialog
        JDialog assignDialog = new JDialog(this, "Assign Officers", true);
        assignDialog.setLayout(new java.awt.GridLayout(3, 2, 10, 10));
        assignDialog.setSize(400, 150);
        assignDialog.setLocationRelativeTo(this);

        JLabel leadLabel = new JLabel("Lead Officer:");
        JComboBox<String> leadComboBox = new JComboBox<>(officerNames.toArray(new String[0]));
        JLabel assistantLabel = new JLabel("Assistant Officer:");
        JComboBox<String> assistantComboBox = new JComboBox<>(officerNames.toArray(new String[0]));
        JButton saveButton = new JButton("Save");
        JButton cancelButton = new JButton("Cancel");

        // Set current officers if already assigned
        if (inv.getOfficerId1() != null) {
            for (Officer officer : officers) {
                if (officer.getOfficerId().equals(inv.getOfficerId1())) {
                    leadComboBox.setSelectedItem(officer.getName());
                    break;
                }
            }
        }
        if (inv.getOfficerId2() != null) {
            for (Officer officer : officers) {
                if (officer.getOfficerId().equals(inv.getOfficerId2())) {
                    assistantComboBox.setSelectedItem(officer.getName());
                    break;
                }
            }
        }

        // Add listeners to enforce mutual exclusivity
        leadComboBox.addActionListener(e -> {
            String selectedLead = (String) leadComboBox.getSelectedItem();
            String selectedAssistant = (String) assistantComboBox.getSelectedItem();
            if (selectedLead != null && selectedLead.equals(selectedAssistant)) {
                assistantComboBox.setSelectedItem(null);
            }
        });

        assistantComboBox.addActionListener(e -> {
            String selectedAssistant = (String) assistantComboBox.getSelectedItem();
            String selectedLead = (String) leadComboBox.getSelectedItem();
            if (selectedAssistant != null && selectedAssistant.equals(selectedLead)) {
                leadComboBox.setSelectedItem(null);
            }
        });

        saveButton.addActionListener(e -> {
            String leadName = (String) leadComboBox.getSelectedItem();
            String assistantName = (String) assistantComboBox.getSelectedItem();

            String leadOfficerId = leadName != null ? officerNameToId.get(leadName) : null;
            String assistantOfficerId = assistantName != null ? officerNameToId.get(assistantName) : null;

            inv.setOfficerId1(leadOfficerId);
            inv.setOfficerId2(assistantOfficerId);

            try 
            {
                csvHandler.addInvestigationDetails(inv);
                JOptionPane.showMessageDialog(this, "Officers assigned successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                populateTable();
                assignDialog.dispose();
            } 
            catch (Exception ex)
            {
                JOptionPane.showMessageDialog(this, "Error assigning officers: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        cancelButton.addActionListener(e -> assignDialog.dispose());

        assignDialog.add(leadLabel);
        assignDialog.add(leadComboBox);
        assignDialog.add(assistantLabel);
        assignDialog.add(assistantComboBox);
        assignDialog.add(saveButton);
        assignDialog.add(cancelButton);

        assignDialog.setVisible(true);
    }//GEN-LAST:event_AssignOfficersBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    
    private void configureTable()
    {
        ongoingCasesTable.setRowHeight(25);
        ongoingCasesTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tableModel.setColumnIdentifiers(new String[]{"Investigation ID", "FIR ID", "Case Started", "Status"});
        ongoingCasesTable.setModel(tableModel);
        ongoingCasesTable.getColumnModel().getColumn(0).setPreferredWidth(120);
        ongoingCasesTable.getColumnModel().getColumn(1).setPreferredWidth(100);
        ongoingCasesTable.getColumnModel().getColumn(2).setPreferredWidth(100);
        ongoingCasesTable.getColumnModel().getColumn(3).setPreferredWidth(100);
    }
    
    
    private void populateTable() 
    {
        List<Investigation> investigations = csvHandler.loadOngoingInvestigations();
        System.out.println("Loaded " + investigations.size() + " ongoing investigations.");
        List<Object[]> data = new java.util.ArrayList<>();
        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
        for (Investigation inv : investigations)
        {
            data.add(new Object[]{
                inv.getInvestigationId(),
                inv.getFirId(),
                sdf.format(inv.getCreationDate()),
                inv.getStatus()
            });
            System.out.println("Added row for INV: " + inv.getInvestigationId());
        }
        tableModel.setDataVector(data.toArray(new Object[0][]), new String[]{"Investigation ID", "FIR ID", "Case Started", "Status"});
        System.out.println("Rows after setDataVector: " + tableModel.getRowCount());
        if (tableModel.getRowCount() == 0) 
        {
            JOptionPane.showMessageDialog(this, "No ongoing cases found.", "Info", JOptionPane.INFORMATION_MESSAGE);
        }
        ongoingCasesTable.repaint();
    }

    private void openInvestigationForm() 
    {
        int row = ongoingCasesTable.getSelectedRow();
        if (row == -1) 
        {
            JOptionPane.showMessageDialog(this, "Please select a case to edit.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String investigationId = (String) ongoingCasesTable.getValueAt(row, 0);
        Investigation inv = csvHandler.findInvestigationById(investigationId);
        if (inv != null) 
        {
            String officerId = csvHandler.getOfficerIdFromUsername(loggedInUsername);
            boolean isAdmin = csvHandler.isAdmin(loggedInUsername);
            if (isAdmin || (officerId != null && (inv.getOfficerId1() != null && inv.getOfficerId1().equals(officerId) || (inv.getOfficerId2() != null && inv.getOfficerId2().equals(officerId))))) 
            {
                new InvestigationForm(inv, loggedInUsername).setVisible(true);
                dispose();
            }
            else 
            {
                JOptionPane.showMessageDialog(this, "You are not assigned to this case.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } 
        else 
        {
            JOptionPane.showMessageDialog(this, "Investigation not found.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OngoingCasesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OngoingCasesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OngoingCasesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OngoingCasesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OngoingCasesForm(loggedInUsername).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AssignOfficersBtn;
    private javax.swing.JButton Backbtn2;
    private javax.swing.JButton ManageViewCasebtn;
    private javax.swing.JLabel headinglbl2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel mainPanel2;
    private javax.swing.JTable ongoingCasesTable;
    private javax.swing.JScrollPane tablePane;
    // End of variables declaration//GEN-END:variables
}
